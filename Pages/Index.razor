@page "/"
@inject ProdutoServices service
@inject IJSRuntime JsRuntime
<h1>InfoTech Store</h1>
<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>Nome</th>
                    <th>Preço</th>
                    <th>Quantidade</th>
                    <th>Descrição</th>
                    
                </tr>
            </thead>
            <tbody>
                @if (Produtos.Any())
                {
                    @foreach (var prod in Produtos)
                    {
                        <tr>
                            <td>@prod.Id</td>
                            <td>@prod.Nome</td>
                            <td>@prod.Preço</td>
                            <td>@prod.Quant</td>
                            <td>@prod.Descr</td>
                            <td>
                                <button class="btn btn-danger" 
                                    @onclick="@(async () => await ApagaProduto(prod))">Deletar
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>Nenhum produto disponível</strong></td></tr>
                }
            </tbody>
        </table>
    </div>

    @if (produtoExcluido)
    {
        <div style="color: red">
            <strong>@mensagemExclusao</strong>
        </div>
    }
</div>

<script>
    window.Confirmar = function (mensagem, id) {
        return confirm(mensagem);
    }
</script>

@code {
    List<Produto> Produtos = new List<Produto>();
    bool produtoExcluido = false;
    string mensagemExclusao = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await AtualizaProdutos();
    }

    private async Task AtualizaProdutos()
    {
        Produtos = await service.RetornaProdutoAsync();
    }

    private async Task ApagaProduto(Produto prod)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("Confirmar", "Você tem certeza?", prod.Id);
        if (confirmed)
        {
            await service.DeleteProductAsync(prod);
            await AtualizaProdutos();

            mensagemExclusao = $"Produto {prod.Nome} com sucesso!";
            produtoExcluido = true;
            
            //Timer timer = new Timer(TimerCallback, null, 3000, Timeout.Infinite);
        }
    }

    /*private void TimerCallback(object state)
    {
        mensagemExclusao = string.Empty;
        produtoExcluido = false;
        StateHasChanged();
    }*/
}
